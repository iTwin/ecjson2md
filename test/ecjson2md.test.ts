import { ECJsonMarkdownGenerator } from "../source/ecjson2md";
import { assert } from "chai";
import { ECJsonBadSearchPath } from "../source/Exception";
import * as fs from "fs";
import * as path from "path";
import * as rimraf from "rimraf";
import { Schema } from "../node_modules/@bentley/ecjs/lib";

describe("ecjson2md", () => {
  describe("ECJsonMarkdownGenerator", () => {
    describe("Instantiate", () => {
      it("should successfully instantiate with no search dirs", () => {
        const testMDGenerator = new ECJsonMarkdownGenerator([]);
        assert.isDefined(testMDGenerator);
      });

      it("should instantiate with several search dirs", () => {
        const testMDGenerator = new ECJsonMarkdownGenerator([".", "..", "./test/Assets/dir/"]);
        assert.isDefined(testMDGenerator);
      });

      it("should throw an exception for a search dir that doesn't exist", () => {
        let err: Error = new Error();

        try {
          new ECJsonMarkdownGenerator([".", "..", "./badPath"]);
        } catch (exc) {
          err = exc;
        }

        assert.equal(ECJsonBadSearchPath.name, err.name);
      });
    });

    describe("Markdown generation", () => {
      const outputDir = path.join(".", "test", "temp");

      // Make the temp dir to store the ouuput
      before(() => {
        if (!fs.existsSync(outputDir))
          fs.mkdirSync(outputDir);
      });

      // Delete the temp dir
      after(() => {
        rimraf.sync(outputDir);
      });

      describe("writeFrontMatter", () => {
        const outputPath = path.join(outputDir, "titleTest.md");
        let testSchema: Schema;

        before(() => {
          testSchema = new Schema();
          testSchema.fromJsonSync
          (JSON.parse(
            '{\
                "$schema":"https://dev.bentley.com/json_schemas/ec/31/draft-01/ecschema",\
                "alias":"testSchema",\
                "name": "testSchema",\
                "version":"02.00.00"\
              }'));
        });

        afterEach(() => {
          if (fs.existsSync(outputPath)) fs.unlinkSync(outputPath);
        });

        it("should correctly write the front matter without an alert", () => {
          ECJsonMarkdownGenerator.writeFrontMatter(outputPath, testSchema, false);

          const outputLines = fs.readFileSync(outputPath).toString().split("\n");
          outputLines;

          assert.equal(outputLines[0], "---");
          assert.equal(outputLines[1], "Schema: testSchema");
          assert.equal(outputLines[2], "This file was automatically generated via ecjson2md. Do not edit this file. Any edits made to this file will be overwritten the next time it is generated");
          assert.equal(outputLines[3], "---");
          assert.equal(outputLines[4], "");
          assert.equal(outputLines[5], "");
        });

        it("should correctly write the front matter with an alert", () => {
          ECJsonMarkdownGenerator.writeFrontMatter(outputPath, testSchema, true);

          const outputLines = fs.readFileSync(outputPath).toString().split("\n");
          outputLines;

          assert.equal(outputLines[0], "---");
          assert.equal(outputLines[1], "Schema: testSchema");
          assert.equal(outputLines[2], "This file was automatically generated via ecjson2md. Do not edit this file. Any edits made to this file will be overwritten the next time it is generated");
          assert.equal(outputLines[3], "---");
          assert.equal(outputLines[4], "");
          assert.equal(outputLines[5], '[!alert text="This documentation represents a nonreleased version of this schema" kind="warning"]');
          assert.equal(outputLines[6], "");
          assert.equal(outputLines[7], "");
        });
      });

      describe("writeTitle", () => {
        const outputPath = path.join(outputDir, "titleTest.md");

        // Delete the output file after each test
        afterEach(() => {
          if (fs.existsSync(outputPath)) fs.unlinkSync(outputPath);
        });

        it("should write the title properly for a schema with no description", () => {
          const testSchema = new Schema();
          testSchema.fromJsonSync
          (JSON.parse(
            '{\
                "$schema":"https://dev.bentley.com/json_schemas/ec/31/draft-01/ecschema",\
                "alias":"testSchema",\
                "name": "testSchema",\
                "version":"02.00.00"\
              }'));

          ECJsonMarkdownGenerator.writeTitle(outputPath, testSchema);

          const outputLines = fs.readFileSync(outputPath).toString().split("\n");

          assert.equal(outputLines[0], "# testSchema");
          assert.equal(outputLines[1], "");
          assert.equal(outputLines[2], "");
        });

        it("should write the title properly for a scheam with a descrption", () => {
          const testSchema = new Schema();
          testSchema.fromJsonSync(JSON.parse(
            '{\
              "$schema":"https://dev.bentley.com/json_schemas/ec/31/draft-01/ecschema",\
              "description":"This is the description",\
              "alias":"testSchema",\
              "name": "testSchema",\
              "version":"02.00.00"\
            }'));

          ECJsonMarkdownGenerator.writeTitle(outputPath, testSchema);

          const outputLines = fs.readFileSync(outputPath).toString().split("\n");

          assert.equal(outputLines[0], "# testSchema");
          assert.equal(outputLines[1], "");
          assert.equal(outputLines[2], "This is the description");
          assert.equal(outputLines[3], "");
          assert.equal(outputLines[4], "");
        });
      });
    });
  });
});
